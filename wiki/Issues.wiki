#summary List of things we still need to do!

= Document Issues we Find (todos, etc.) =

== Priority ==

  * Open the Drafts Folder. Create a new email. While working on it, Save as Draft. Issue is that we need to update the model, so the view behind the email is updated (automatically).

  * Move -> Persistence Layer should take care of Move (means, open the existing file for the email, set ParentFolder to new Destination, and then use the File.io cut/paste)


  * Create and delete subfolder -> decide on a refresh tree strategy

  * Using EmailViewEntity selectedEmailEntity in EmailClient isn't the best way. Look for alternatives.

  * Javadocs (big points)

  * Consistency of labels between right click and menu entries (Move Email vs. Move Selected Email)

  * Robustness - do some basic input sanitization / validation. This is for: folder name, to address, subject, max length on certain fields. Should we allow moving emails which are in the Drafts folder? 

  * EmailClient is too large (500+ lines). We need to have better naming for our variables (camelCase)

  * Can we make JTable columns 20%, 60%, 20% ? See http://stackoverflow.com/questions/953972/java-jtable-setting-column-width

  * New Email UI: Could we make the Send button first, and Save to Draft second? Also, can we extend the "To", "CC", and "Subject" fields to the whole width? 

  
  * Create Subfolder -> if subfolder already exists, prevent user from creating.


  * (DONE) Alt-F should open up the File menu, and Alt-E should open up the Edit.

  * (DONE) Prevent deletion of the emails root folder. 

  * (DONE) Look and Feel for Menu -> can we underline the hotkeys in the Menu.

  * (DONE)(Low) see how we disabled multiple selection for JTable. Multiple selection is allowed with Shift and Keyboard up / down


== UI ==

  
  * (Low) Headings for JTable are different in Inbox (From, Subject, Time), and Drafts (To, Subject, Time)


== Model ==

  * Finalize interfaces
  * Unit tests
  * {{{EmailImpl}}} currently checks if the date field {{{LastModifiedDate}}} is empty. If not, we get a runtime exception. But this might be the wrong approach. We basically cannot allow this field to ever be empty. It's an invariant! The sorting depends on it.

== Persistence ==

  * Unit tests ?
  * If you hit "enter" a few times while composing an email, the system inserts "\n" within the text. In the XML file however, it's stored simply as space (new lines). How can we preserve that when we convert the XML back to a string to display in the UI?

== Cross-cutting Concerns ==

  * The fields for EACH LAYER need to be well established and documented