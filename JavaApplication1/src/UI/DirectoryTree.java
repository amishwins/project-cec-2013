/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import java.awt.Component;  
import java.io.File;  
   
import javax.swing.JFrame;  
import javax.swing.JLabel;  
import javax.swing.JScrollPane;  
import javax.swing.JTree;  
import javax.swing.event.TreeExpansionEvent;  
import javax.swing.event.TreeWillExpandListener;  
import javax.swing.tree.DefaultMutableTreeNode;  
import javax.swing.tree.DefaultTreeCellRenderer;  
import javax.swing.tree.DefaultTreeModel;  

/**
 *
 * @author DW
 */
public class DirectoryTree extends javax.swing.JFrame {

   private JTree tree;  
      
    public DirectoryTree() {  
        super( "DirectoryTree" );  
        tree = new JTree( new DirectoryModel() );  
        tree.addTreeWillExpandListener( new DirectoryExpansionListener() );  
        tree.setCellRenderer( new DirectoryRenderer() );  
        getContentPane().add( new JScrollPane( tree ) );  
        setDefaultCloseOperation( EXIT_ON_CLOSE );  
        setBounds( 300, 300, 400, 400 );  
        setVisible( true );  
       
    }  
      
  
      
    private static class DirectoryModel extends DefaultTreeModel {  
          
        private DefaultMutableTreeNode root;  
          
        public DirectoryModel() {  
            super( new DefaultMutableTreeNode( "C:\\windows\\" ) );  
            root = (DefaultMutableTreeNode)getRoot();  
            File[] f = File.listRoots();  
            for ( int i = 0; i < f.length; i++ ) {  
                DefaultMutableTreeNode fileRoot = new DefaultMutableTreeNode( f[i] );  
                fileRoot.add( new DefaultMutableTreeNode() );  
                root.add( fileRoot );  
            }  
        }  
    }  
      
    private static class DirectoryRenderer extends DefaultTreeCellRenderer {  
          
        public Component getTreeCellRendererComponent( JTree tree, Object value,  
                boolean sel, boolean expanded, boolean leaf, int row,   
                boolean hasFocus ) {  
            JLabel l = (JLabel)super.getTreeCellRendererComponent( tree, value, sel,  
                    expanded, leaf, row, hasFocus);  
            Object userObject = ((DefaultMutableTreeNode)value).getUserObject();  
            if ( userObject instanceof File ) {  
                String name = ((File)userObject).getName();  
                if ( name.trim().equals( "" ) ) {  
                    l.setText( ((File)userObject).toString() );  
                }  
                else {  
                    l.setText( ((File)userObject).getName() );  
                }  
            }  
            return l;   
        }  
    }  
      
    private static class DirectoryExpansionListener implements TreeWillExpandListener {  
        public void treeWillCollapse( TreeExpansionEvent e ) {  
            Object node = e.getPath().getLastPathComponent();  
            if ( node instanceof DefaultMutableTreeNode ) {  
                ((DefaultMutableTreeNode)node).removeAllChildren();  
                ((DefaultMutableTreeNode)node).add( new DefaultMutableTreeNode() );  
            }  
        }  
          
        public void treeWillExpand( TreeExpansionEvent e ) {  
            Object node = e.getPath().getLastPathComponent();  
            if ( node instanceof DefaultMutableTreeNode ) {  
                Object userObj = ((DefaultMutableTreeNode)node).getUserObject();  
                if ( userObj instanceof File ) {  
                    ((DefaultMutableTreeNode)node).removeAllChildren();  
                    File f = (File)userObj;  
                    try {  
                        File[] childFile = f.listFiles();  
                        for ( int i = 0; i < childFile.length; i++ ) {  
                            if ( childFile[i].isDirectory() ) {  
                                DefaultMutableTreeNode childNode = new DefaultMutableTreeNode( childFile[i] );  
                                childNode.add( new DefaultMutableTreeNode() );  
                                ((DefaultMutableTreeNode)node).add( childNode );  
                            }  
                        }  
                    }  
                    catch ( Exception x ) {  
                        // Problem reading directory...  
                        x.printStackTrace();  
                    }  
                }  
            }  
        }  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DirectoryTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DirectoryTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DirectoryTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DirectoryTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DirectoryTree().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
